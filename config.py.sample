#
# Copyright (c) 2022 Carsten Igel.
#
# This file is part of Nitrate Alpine Docker Images With Social-Auth 
# (see https://github.com/carstencodes/nitrate-images).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
from django.conf import settings

settings.ASYNC_TASK = None

from nitrate.extras import *
from tcms.settings.product import *

from os import getenv

def getenv_ensured(key) -> str:
    value: str = getenv(key)
    if value is None:
        raise ValueError(f"'{key}' is not set.")
    
    return value

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

_backend = getenv_ensured("NITRATE_DB_BACKEND")
# Database settings
DATABASES = {
    'default': {
        'ENGINE': f"django.db.backends.{_backend}",
        'NAME': getenv_ensured("POSTGRES_DB"),
        'HOST': getenv_ensured("NITRATE_DB_HOST"),
        'USER': getenv_ensured("POSTGRES_USER"),
        'PASSWORD': getenv_ensured("POSTGRES_PASSWORD"),
    },
}
# Nitrate defines a 'slave_1' connection
DATABASES['slave_1'] = DATABASES['default']

SECRET_KEY = getenv_ensured("NITRATE_SECRET_KEY")

MIDDLEWARE = EXTRA_MIDDLEWARE + MIDDLEWARE

ALLOWED_HOSTS = [ getenv("NITRATE_DOMAIN", "localhost") ]
DEFAULT_FROM_EMAIL = getenv("NITRATE_SENDER_MAIL", "root@localhost" )

TIME_ZONE = getenv("NITRATE_SERVER_TZ", "utc")

# set to true, to enable social auth, but configure properly
# Refer to https://python-social-auth.readthedocs.io/en/latest/index.html
# for details
if False:
    INSTALLED_APPS = ("social_django", ) + INSTALLED_APPS

    SOCIAL_AUTH_JSONFIELD_ENABLED = True

    SOCIAL_AUTH_URL_NAMESPACE = 'social'

    # Edit your backends here
    AUTHENTICATION_BACKENDS = ( "my.social.provider", ) + AUTHENTICATION_BACKENDS

    TEMPLATES[0]["OPTIONS"]["context_processors"].append("social_django.context_processors.backends")
    TEMPLATES[0]["OPTIONS"]["context_processors"].append("social_django.context_processors.login_redirect")

    SOCIAL_AUTH_PIPELINE = (
        'social_core.pipeline.social_auth.social_details',
        'social_core.pipeline.social_auth.social_uid',
        'social_core.pipeline.social_auth.social_user',
        'social_core.pipeline.user.get_username',
        'social_core.pipeline.social_auth.associate_by_email',
        'social_core.pipeline.user.create_user',
        'social_core.pipeline.social_auth.associate_user',
        'social_core.pipeline.social_auth.load_extra_data',
        'social_core.pipeline.user.user_details',
    )

    SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
        # Edit your backends here
        "my.social.provider",
    )

    SOCIAL_AUTH_USER_MODEL = 'auth.User'

    # Set your desired options here
    SOCIAL_AUTH_UUID_LENGTH = 16

    SOCIAL_AUTH_SLUGIFY_USERNAMES = True

    SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = False

    SOCIAL_AUTH_CLEAN_USERNAMES = True

    SOCIAL_AUTH_CLEAN_USERNAME_FUNCTION = None

    SOCIAL_AUTH_IMMUTABLE_USER_FIELDS = ['email','username',]
    SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email',]

    SOCIAL_AUTH_SESSION_EXPIRATION = False

    ENABLED_AUTH_BACKENDS['SOCIAL'] = [
        ]

